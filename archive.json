{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-02-25T00:22:15.402905+00:00",
  "repo": "tfpauly/privacy-proxy",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU4MDY1NjM4MTQ=",
      "title": "Allow privacy token to support either 2048 or 4096 RSA keys",
      "url": "https://github.com/tfpauly/privacy-proxy/issues/1",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "We should support different versions here.",
      "createdAt": "2021-02-11T16:47:52Z",
      "updatedAt": "2021-02-23T20:33:12Z",
      "closedAt": "2021-02-23T19:20:50Z",
      "comments": [
        {
          "author": "FredericJacobs",
          "authorAssociation": "COLLABORATOR",
          "body": "Our recommendation for RSA is to keep 4096-bit keys. We can take a look at how to address performance concerns but I don't think reducing the security parameter size is the best option.",
          "createdAt": "2021-02-11T16:55:18Z",
          "updatedAt": "2021-02-11T16:55:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I support this relaxation. The actual long-term threat here only applies in very unrealistic or improbable scenarios. That said, having the version determine the key length is nice. ",
          "createdAt": "2021-02-18T23:15:58Z",
          "updatedAt": "2021-02-18T23:15:58Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "Is it worth then defining both a v1 (4096-bit key) and a v2 (same but 2048-bit key) within this draft, with some security considerations talking about the trade-offs?  (Or swapping the ordering of v1/v2?)",
          "createdAt": "2021-02-23T20:29:18Z",
          "updatedAt": "2021-02-23T20:29:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is it worth then defining both a v1 (4096-bit key) and a v2 (same but 2048-bit key) within this draft, with some security considerations talking about the trade-offs? (Or swapping the ordering of v1/v2?)\r\n\r\nIt probably wouldn't hurt, yeah. Clients that are willing to accept 2048-bit keys could choose to do so. ",
          "createdAt": "2021-02-23T20:33:12Z",
          "updatedAt": "2021-02-23T20:33:12Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU4MTEzNjI2NDI=",
      "title": "Expand key_id to 8 bytes",
      "url": "https://github.com/tfpauly/privacy-proxy/issues/2",
      "state": "OPEN",
      "author": "enygren",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "With key_id now being a hash of the public key, it would be preferable to switch the size of key_id to 8 bytes.  The chance of collisions with a  32-bit key_id with frequent rotations means that the key generation will need to track past keys to explicitly avoid collisions.  With a 64-bit key_id, accidental collisions is much more likely to be a non-issue.\r\n\r\n",
      "createdAt": "2021-02-18T18:42:52Z",
      "updatedAt": "2021-02-18T23:14:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "(We should also define the encoding of the public key being hashed)",
          "createdAt": "2021-02-18T18:54:05Z",
          "updatedAt": "2021-02-18T18:54:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We should also define the encoding of the public key being hashed\r\n\r\nThe public key is a DER-encoded SubjectPublicKeyInfo, which is fairly standard. 8 bytes seems fine here.",
          "createdAt": "2021-02-18T23:14:22Z",
          "updatedAt": "2021-02-18T23:14:22Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU4MTM4MDM2MTc=",
      "title": "Strongly reference RSA blind in the Privacy Token Structure section",
      "url": "https://github.com/tfpauly/privacy-proxy/issues/4",
      "state": "OPEN",
      "author": "tfpauly",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Add comment in section 2 highlighting that the message must be encoded as described in [RSASIG] for the creation of this signature; otherwise without the appropriate encoding this scheme is not robust",
      "createdAt": "2021-02-22T19:39:55Z",
      "updatedAt": "2021-02-22T19:39:55Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2MDYxNDg5",
      "title": "Expand KeyID, and clarify its format.",
      "url": "https://github.com/tfpauly/privacy-proxy/pull/3",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1 and #2.",
      "createdAt": "2021-02-18T23:18:30Z",
      "updatedAt": "2021-02-23T19:20:50Z",
      "baseRepository": "tfpauly/privacy-proxy",
      "baseRefName": "main",
      "baseRefOid": "e7ebedbd3c7a18189a95cde50eee85ceb9ce690a",
      "headRepository": "tfpauly/privacy-proxy",
      "headRefName": "caw/keyids",
      "headRefOid": "c92380c26f5a2e2426282a7e427d9a78d9daa335",
      "closedAt": "2021-02-23T19:20:50Z",
      "mergedAt": "2021-02-23T19:20:50Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "0347212c78394d0e2f4bae48675f4e9cb899d862"
      },
      "comments": [
        {
          "author": "FredericJacobs",
          "authorAssociation": "COLLABORATOR",
          "body": "Random thought, if we require a hash function H for the blinding scheme, do we want to use that same hash function for the KeyID (eg. SHA384). ",
          "createdAt": "2021-02-19T15:32:04Z",
          "updatedAt": "2021-02-19T15:32:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Random thought, if we require a hash function H for the blinding scheme, do we want to use that same hash function for the KeyID (eg. SHA384).\r\n\r\nWe could, yeah. But we might just consider changing things entirely so that the server specifies the KeyID and there is no client computation at all. (This is the direction we're going for ECH.) This is just a hint for servers anyway, and they know whether or not they will have collisions. ",
          "createdAt": "2021-02-19T15:42:01Z",
          "updatedAt": "2021-02-19T15:42:01Z"
        },
        {
          "author": "plisiecki1",
          "authorAssociation": "NONE",
          "body": "8 or 16 bytes of hash should adequately reduce the odds of collisions to the extent that it should never happen. Letting the server pick the KeyID would also resolve the collision issue. There may be some (minor) convenience factor for servers to look up keys by a chosen KeyID (e.g., a counter) rather than a derived one (hash).\r\n\r\nRather than making Nk depend on the version, could the signature field for v1 be defined as the rest of the token?  Then no new version is needed for RSA2048 vs RSA4096 vs RSA8192, etc. As long as the client and proxy support the number of key bits, the signature can be encoded efficiently into a version 1 token.",
          "createdAt": "2021-02-19T18:01:18Z",
          "updatedAt": "2021-02-19T18:02:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Rather than making Nk depend on the version, could the signature field for v1 be defined as the rest of the token? Then no new version is needed for RSA2048 vs RSA4096 vs RSA8192, etc. As long as the client and proxy support the number of key bits, the signature can be encoded efficiently into a version 1 token.\r\n\r\nPerhaps -- I'd need to think about this some more.",
          "createdAt": "2021-02-19T18:04:58Z",
          "updatedAt": "2021-02-19T18:04:58Z"
        },
        {
          "author": "FredericJacobs",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood : Do we just take a SHA-256 hash and not truncate it?",
          "createdAt": "2021-02-23T18:53:53Z",
          "updatedAt": "2021-02-23T18:53:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> @chris-wood : Do we just take a SHA-256 hash and not truncate it?\r\n\r\nWhat's the rationale? This is just a hint. If security of the thing using this hint depends on lack of collision, that seems like a bigger problem. ",
          "createdAt": "2021-02-23T18:55:32Z",
          "updatedAt": "2021-02-23T18:55:32Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2NzExMTk2",
          "commit": {
            "abbreviatedOid": "c92380c"
          },
          "author": "tfpauly",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-23T19:20:39Z",
          "updatedAt": "2021-02-23T19:20:39Z",
          "comments": []
        }
      ]
    }
  ]
}